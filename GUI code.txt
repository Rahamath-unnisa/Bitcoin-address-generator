import tkinter as tk
from tkinter import messagebox
import requests
from bitAddress import address_generator
from PIL import Image, ImageTk
def generate():
    name = entry_name.get().strip().lower()
    if not name:
        messagebox.showwarning("Input Required", "Please enter a username.")
        return

    try:
        # Check if username exists
        response = requests.get(f"http://127.0.0.1:8000/get_keys/{name}")

        if response.status_code == 200:
            # ‚úÖ Username exists ‚Äî show error and STOP (don't generate new keys)
            messagebox.showerror("Error", "Username already exists! Please choose a different one.")
            return

        elif response.status_code == 404:
            # ‚úÖ Username not found ‚Äî now safely generate keys
            keys = address_generator(name)

            save_response = requests.post(
                "http://127.0.0.1:8000/store_keys/",
                json={
                    "username": name,
                    "private_key": keys["private_key"],
                    "public_key": keys["public_key"],
                    "address": keys["address"]
                }
            )

            if save_response.status_code == 200:
                messagebox.showinfo("Success", "New keys generated and saved.")
                lbl_private_val.config(text=keys["private_key"])
                lbl_public_val.config(text=keys["public_key"])
                lbl_address_val.config(text=keys["address"])
            else:
                messagebox.showerror("Error", f"Error saving keys: {save_response.text}")
                return

        else:
            # Unexpected error code
            messagebox.showerror("Error", f"Unexpected error: {response.status_code}")
            return

    except Exception as e:
        messagebox.showerror("Error", f"Request failed: {e}")

# GUI
root = tk.Tk()
root.title("Bitcoin Address Generator")
root.geometry("800x600")
root.resizable(False, False)

# üñºÔ∏è Set Background Image
bg_image = Image.open("assets\\bgimg.jpg")
bg_image = bg_image.resize((800, 600))
bg_photo = ImageTk.PhotoImage(bg_image)

bg_label = tk.Label(root, image=bg_photo)
bg_label.place(x=0, y=0, relwidth=1, relheight=1)

# üßæ Title
tk.Label(root, text="Bitcoin Address Generator", font=("Arial", 20, "bold"), fg="orange", bg="#ffffff").pack(pady=(10, 0))

# üîÜ Logo
image = Image.open("assets\\bitcoin_logo").convert("RGBA") 
background = Image.new("RGB", image.size, (255, 255, 255))  # or any background color
background.paste(image, mask=image.split()[3])  # Paste using alpha channel as mask
logo_photo = ImageTk.PhotoImage(background.resize((100, 100)))
tk.Label(root, image=logo_photo, bg="#ffffff").pack(pady=(10, 0))

# ‚úèÔ∏è Username Entry
tk.Label(root, text="Enter Username:", font=("Arial", 12, "bold"), bg="#ffffff").pack(pady=(10, 0))
entry_name = tk.Entry(root, font=("Arial", 12), width=30)
entry_name.pack(pady=5)

# ‚úÖ Generate Button
tk.Button(root, text="Generate Address", command=generate,
          font=("Arial", 12, "bold"), bg="orange", fg="black").pack(pady=10)

# üì¶ Output Frame (with background image look)
output_frame = tk.Frame(root, width=700, height=250)
output_frame.pack(pady=10)
output_frame.pack_propagate(False)
#Add background image to output_frame
output_bg_image = Image.open("assets\\bgimg.jpg")  # adjust crop area to suit
output_bg_image=output_bg_image.resize((700,250))
output_bg_photo = ImageTk.PhotoImage(output_bg_image)

output_bg_label = tk.Label(output_frame, image=output_bg_photo)
output_bg_label.place(x=0, y=0, relwidth=1, relheight=1)
wrap_len = 680

def create_output_row(label_text):
    tk.Label(output_frame, text=label_text, font=("Arial", 10, "bold"),
             anchor="w", bg=None).pack(anchor="w", padx=10, pady=(5, 0))
    label = tk.Label(output_frame, text="", wraplength=wrap_len,
                     justify="left", font=("Courier", 10), bg=None)
    label.pack(anchor="w", padx=10)
    return label

lbl_private_val = create_output_row("Private Key:")

lbl_public_val = create_output_row("Public Key:")

lbl_address_val = create_output_row("Address:")


root.mainloop()   